from datetime import datetime, timedelta
from typing import Annotated

from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from passlib.context import CryptContext
from pydantic import BaseModel
from sqlalchemy.orm import Session
from sqlalchemy.util import deprecated
from starlette import status
from app.core.config import SECRET_KEY, ALGORITHM


from app.security import hash_password, verify_password
from app.schemas import UserCreate
from app.database import SessionLocal
from app.dependency import db_dependency, user_dependency
from app.models.user import User, UserOut, UserWithToken
from app.schemas import UserCreate, UserLogin, UserResponse


router = APIRouter(prefix="/auth", tags=["auth"])
# SECRET_KEY Can be generated by "openssl rand -hex 32" command.


#We use bcrypt to securely hash user passwords:
#bcrypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_bearer = OAuth2PasswordBearer(tokenUrl="auth/login")


class CreateUserRequest(BaseModel):
    username: str
    password: str


class Token(BaseModel):
    full_name: str
    access_token: str
    token_type: str


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def authenticate_user(username: str, password: str, db):
    """
    Verifies the username and password against stored hashed password.
    Returns the user if authentication is successful, otherwise returns False.
    """
    user = db.query(User).filter(User.username == username).first()
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user


def create_access_token(username: str, user_id: int, expires_delta: timedelta | None = None):
    """
    Generates a JWT access token with an expiration time.
    """
    to_encode = {"sub": username, "id": user_id}
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=30))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@router.post("/login", response_model=Token)
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()], db: db_dependency):
    """
    Authenticates user credentials and returns a JWT token if valid.
    """
    user = authenticate_user(form_data.username, form_data.password, db)

    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate User"
        )
    username = user.username
    user_id = user.id
    token = create_access_token(username, user_id, timedelta(minutes=20))

    return { "access_token": token, "token_type": "bearer"}


@router.post("/register", response_model=UserWithToken)
async def user_registration( payload: UserCreate, db: db_dependency):
    """
    Register the user account and returns a JWT token upon successful registration.
    """
    if db.query(User).filter(User.username == payload.username).first():
        raise HTTPException(status_code=400, detail="Username already taken")
    if db.query(User).filter(User.email == payload.email).first():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered")

    user = User(
        username=payload.username,
        hashed_password=hash_password(payload.password),
        email=payload.email,
        full_name=payload.full_name,
        dob=payload.dob,
        sex = payload.sex,
        height_cm=payload.height_cm,
        weight_kg=payload.weight_kg)
    
    user.bmi = user.calculate_bmi()
        
    db.add(user)
    db.commit()
    db.refresh(user)

    token = create_access_token(user.username, user.id, timedelta(minutes=30))
    
    userOut = UserOut(
        id=user.id,
        username=user.username,
        full_name=user.full_name,
        email=user.email,
        dob=user.dob.isoformat(),
        sex = user.sex,
        height_cm=user.height_cm,   
        weight_kg=user.weight_kg,
        bmi=user.bmi    
    )
    return {"user": userOut, "access_token" : token, "token_type" :"bearer",
         "detail": f"User {user.username} has been created successfully"}